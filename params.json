{"name":"Guardian","tagline":"Remove the OAuth dance with one request.","body":"# Guardian\r\n\r\nAvoid dealing with OAuth logic in your code, and spend more time creating your product. Guardian reduces the OAuth footprint in your code to a *single* request.\r\n\r\nBuilt with modularity in mind, Guardian leverages plugins to handle OAuth flows, should you encounter a flow that Guardian doesn't handle, create a small flow plugin to do so and carry on. Guardian comes with **5** pre-made plugins that cover **99%** of OAuth services.\r\n\r\nNot to mention, Guardian is perfect for **both** production *and* testing. Services like Github require you to enter a single callback url, this is fine when in production, but move to another environment and soon you'll have conflicts, require building complex services to juggle environment scenarios and more. Guardian is centralized and easily configurable to allow multiple environments giving you the flexibility you need.\r\n\r\nCreated with love by [nijikokun](http://github.com/nijikokun) at http://mashape.com\r\n\r\n## Requirements\r\n\r\n- Node.js\r\n- Redis\r\n\r\n## Install\r\n\r\nSetup redis, then:\r\n\r\n```bash\r\n$ npm install guardian\r\n```\r\n\r\n## Starting\r\n\r\n```bash\r\n$ node index.js -c <configuration>\r\n```\r\n\r\n### Configuration\r\n\r\nConfiguration files can be found in the `config` directory, when no configuration file is declared `default.js` is loaded, when declaring which file to use omit the `js` extension like so:\r\n\r\n```bash\r\n$ node index.js -c production\r\n```\r\n\r\nBasic Options:\r\n\r\n- `host`\r\n  *You should set this to be the public ip or domain name as it is utilized to generate the callback uri.*\r\n\r\n  Default: `localhost:3000`\r\n- `protocol`\r\n  *Host protocol*\r\n\r\n  Default: `http`\r\n- `port`\r\n  *Port on which guardian runs*\r\n\r\n  Default: `3000`\r\n- `pid.dir`\r\n  *Directory where the `.guardian.pid` file will be output, in production environments this is usually `/home/<user>/`, with trailing slash.*\r\n\r\n  Default: `./`\r\n- `redis.host`\r\n- `redis.port`\r\n- `redis.pass`\r\n\r\n## Routes\r\n\r\nEach endpoint functions as a step.\r\n\r\n### Storage\r\n\r\n    POST /store\r\n\r\nStores information given, returns hash to be used later on. `60` second life on the hashed information by default.\r\n\r\n#### Parameters\r\n\r\n**OAuth 2**\r\n> Details specific to OAuth2\r\n\r\n- `client_id`\r\n- `client_secret`\r\n- `grant_type`\r\n  *Some common values, depends on flow*\r\n  - `authorization_code`\r\n  - `client_credentials`\r\n  - `password`\r\n  - `refresh_token`\r\n- `access_name` *access token name, default `access_token`*\r\n- `authorize_method` *Optional; Authorization Header Method, default is `Bearer`*\r\n  - Some Possible Values:\r\n  - `Bearer` *default*\r\n  - `OAuth`\r\n  - `Digest`\r\n- `state`\r\n- `scope`\r\n\r\n**OAuth 1**\r\n> Details specific to OAuth 1.0a\r\n\r\n- `consumer_key`\r\n- `consumer_secret`\r\n- `signature_method`\r\n- `oauth_token`\r\n\r\n**Authentication** *required*\r\n> General information regarding authentication flow to load plugin, e.g.\r\n\r\n- `auth_type` *a-z chars accepted only*\r\n\r\n  Default: `oauth`\r\n- `auth_flow` *optional; a-z_ chars accepted only*\r\n\r\n  > This would be a specific flow, a niche if you may. Echo, Owner Resources, etc..\r\n- `auth_version` *optional; numeric chars only*\r\n\r\n  > What version of `auth_type` are we dealing with?\r\n- `auth_leg` *optional; numeric chars only*\r\n\r\n  > What leg of `auth_type` is this?\r\n\r\nThese are combined to create the plugin file name which is composed like so:\r\n\r\n```js\r\ntype.lower + (flow? '_' + flow : '') + (version? '_' + version : '') + (leg? '_' + leg + '-legged' : '')\r\n```\r\n\r\nFor example, OAuth 2 (3-legged) plugin:\r\n\r\n```js\r\n// plugins/oauth_2_3-legged.js\r\n\r\n{\r\n  auth_type: 'oauth',\r\n  auth_version: 2,\r\n  auth_leg: 3\r\n}\r\n```\r\n\r\n**General**\r\n\r\n- `request_url`\r\n- `access_url`\r\n- `authorize_url`\r\n- `callback` *for access_token & access_secret response*\r\n\r\n### Hash Check\r\n\r\n    GET /hash-check\r\n\r\nAllows you to preview / verify your stored information in-case of error or malformed response.\r\n\r\nOnce again, stored information by default lasts only `10` seconds.\r\n\r\n#### Parameters\r\n\r\n- `hash`\r\n\r\n### Start\r\n\r\n    ALL /start\r\n\r\nBegins guardian transactions and authentication steps. These steps are passed with a `302` request and should be followed.\r\n\r\n#### Parameters\r\n\r\n- `hash`\r\n\r\n**OAuth 1.0a**\r\n> Used in the OAuth 1.0a Signature Process for 1-Legged requests. [Example](https://github.com/Mashape/guardian/blob/master/tests/factual.js#L46).\r\n\r\n- `url` *Calling URL, query parameters will be parsed from here as well as parameters property.*\r\n- `method` *Calling Method*\r\n- `body` *Calling Payload or Body*\r\n- `parameters` *Calling Parameters for Request Signatures or etc...*\r\n\r\n## Tests\r\n\r\nEach test in the test folder is based on an API or feature of guardian rather than TDD or BDD based tests, we simply verify whether the authentication succeeds and we get a response from the API about the API information rather than Authentication information.\r\n\r\nTests also serve as good [examples](tests/).\r\n\r\nEach API based test will require something of the likes:\r\n\r\n```\r\n$ node tests/api.js -k {Your Consumer/Client Key/Id} -s {Your Consumer/Client Secret} -h {host, ie: localhost or domain}\r\n```\r\n\r\nYou will recieve a response with the headers sent, and the returned response from the API, guardian must be running locally for these tests to work and on the port `3000`. Unless you alter these files~\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}